in object oriented programming, you write:
classes to represent real-world things and situations
and objects based on these classes
instantiation is making an object from a class, i.e
you work with instances of a class

- a function that's part of a class is a method
# the __init__()method
    - a special method that runs automatically whenever
    we create a new instance based on the given class

    Types of methods
    1. Regular Methods - take instance(self) as the first argument
    2. Class Methods(have @classmethod decorator) - take class(cls) as 1st argument
    3. Static Methods - unlike the two above, these don't pass anything automatically nothing
                        like regular functions, only added bcz they have some logical connection

Making an instance from a class
Think of a class as a set of instructions that tells python 
how to make individual instances representing specific objects

Inheritance
when one class takes on the attributes and methods of the first class
original being the parent class and the new being the child class

when you create a child class, the parent class must be part of the
current file and must appear before the child class in the file
    - the name of the parent class must be included in parantheses 
      in definition of a child class
    - super() function - a special function that allows you to call
      a method from the parent class(comes from the convention of 
      calling the parent class a superclass and the child, a subclass)

defining attributes and methods for the child class
    - after initializing attributes of parent class with the super function,
      eg super().__init__(make, model, year), we then initialize attributes and methods
      specific to the child class
    - You can also override any method from the parent class that doesn't fit what
      you are trying to model with the child class. You do this by re-writing the
      method and printing some info to reflect that the given method doesn't apply
 to check Inheritance, use isinstance, issubclass
Instances as Attributes
    - you can break your large class into smaller classes that work together
      For example, if we continue adding detail to the electricCar class,
      we might notice that we are adding many attributes and methods specific 
      to the car's battery. When we see this happen', we can stop and move those 
      attributes and methods to a separate class called Battery. Then we can
      use a Battery instance as an attribute in the ElectricCar class

Importing classes
    - You want to keep your files as uncluttered as possible. To help,
      python lets you store classes in modules and then import the classes
      you need into your main program
    - You can either import a single class or multiple classes in a modules
    -n